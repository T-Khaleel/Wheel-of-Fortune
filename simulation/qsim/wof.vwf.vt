// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/29/2019 00:14:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    wof
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module wof_vlg_sample_tst(
	btn,
	clk,
	sampler_tx
);
input  btn;
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(btn or clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module wof_vlg_check_tst (
	led,
	ssd0,
	ssd1,
	ssd2,
	ssd3,
	sampler_rx
);
input [7:0] led;
input [6:0] ssd0;
input [6:0] ssd1;
input [6:0] ssd2;
input [6:0] ssd3;
input sampler_rx;

reg [7:0] led_expected;
reg [6:0] ssd0_expected;
reg [6:0] ssd1_expected;
reg [6:0] ssd2_expected;
reg [6:0] ssd3_expected;

reg [7:0] led_prev;
reg [6:0] ssd0_prev;
reg [6:0] ssd1_prev;
reg [6:0] ssd2_prev;
reg [6:0] ssd3_prev;

reg [7:0] led_expected_prev;
reg [6:0] ssd0_expected_prev;
reg [6:0] ssd1_expected_prev;
reg [6:0] ssd2_expected_prev;
reg [6:0] ssd3_expected_prev;

reg [7:0] last_led_exp;
reg [6:0] last_ssd0_exp;
reg [6:0] last_ssd1_exp;
reg [6:0] last_ssd2_exp;
reg [6:0] last_ssd3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	led_prev = led;
	ssd0_prev = ssd0;
	ssd1_prev = ssd1;
	ssd2_prev = ssd2;
	ssd3_prev = ssd3;
end

// update expected /o prevs

always @(trigger)
begin
	led_expected_prev = led_expected;
	ssd0_expected_prev = ssd0_expected;
	ssd1_expected_prev = ssd1_expected;
	ssd2_expected_prev = ssd2_expected;
	ssd3_expected_prev = ssd3_expected;
end


// expected led[ 7 ]
initial
begin
	led_expected[7] = 1'bX;
end 
// expected led[ 6 ]
initial
begin
	led_expected[6] = 1'bX;
end 
// expected led[ 5 ]
initial
begin
	led_expected[5] = 1'bX;
end 
// expected led[ 4 ]
initial
begin
	led_expected[4] = 1'bX;
end 
// expected led[ 3 ]
initial
begin
	led_expected[3] = 1'bX;
end 
// expected led[ 2 ]
initial
begin
	led_expected[2] = 1'bX;
end 
// expected led[ 1 ]
initial
begin
	led_expected[1] = 1'bX;
end 
// expected led[ 0 ]
initial
begin
	led_expected[0] = 1'bX;
end 
// expected ssd0[ 6 ]
initial
begin
	ssd0_expected[6] = 1'bX;
end 
// expected ssd0[ 5 ]
initial
begin
	ssd0_expected[5] = 1'bX;
end 
// expected ssd0[ 4 ]
initial
begin
	ssd0_expected[4] = 1'bX;
end 
// expected ssd0[ 3 ]
initial
begin
	ssd0_expected[3] = 1'bX;
end 
// expected ssd0[ 2 ]
initial
begin
	ssd0_expected[2] = 1'bX;
end 
// expected ssd0[ 1 ]
initial
begin
	ssd0_expected[1] = 1'bX;
end 
// expected ssd0[ 0 ]
initial
begin
	ssd0_expected[0] = 1'bX;
end 
// expected ssd1[ 6 ]
initial
begin
	ssd1_expected[6] = 1'bX;
end 
// expected ssd1[ 5 ]
initial
begin
	ssd1_expected[5] = 1'bX;
end 
// expected ssd1[ 4 ]
initial
begin
	ssd1_expected[4] = 1'bX;
end 
// expected ssd1[ 3 ]
initial
begin
	ssd1_expected[3] = 1'bX;
end 
// expected ssd1[ 2 ]
initial
begin
	ssd1_expected[2] = 1'bX;
end 
// expected ssd1[ 1 ]
initial
begin
	ssd1_expected[1] = 1'bX;
end 
// expected ssd1[ 0 ]
initial
begin
	ssd1_expected[0] = 1'bX;
end 
// expected ssd2[ 6 ]
initial
begin
	ssd2_expected[6] = 1'bX;
end 
// expected ssd2[ 5 ]
initial
begin
	ssd2_expected[5] = 1'bX;
end 
// expected ssd2[ 4 ]
initial
begin
	ssd2_expected[4] = 1'bX;
end 
// expected ssd2[ 3 ]
initial
begin
	ssd2_expected[3] = 1'bX;
end 
// expected ssd2[ 2 ]
initial
begin
	ssd2_expected[2] = 1'bX;
end 
// expected ssd2[ 1 ]
initial
begin
	ssd2_expected[1] = 1'bX;
end 
// expected ssd2[ 0 ]
initial
begin
	ssd2_expected[0] = 1'bX;
end 
// expected ssd3[ 6 ]
initial
begin
	ssd3_expected[6] = 1'bX;
end 
// expected ssd3[ 5 ]
initial
begin
	ssd3_expected[5] = 1'bX;
end 
// expected ssd3[ 4 ]
initial
begin
	ssd3_expected[4] = 1'bX;
end 
// expected ssd3[ 3 ]
initial
begin
	ssd3_expected[3] = 1'bX;
end 
// expected ssd3[ 2 ]
initial
begin
	ssd3_expected[2] = 1'bX;
end 
// expected ssd3[ 1 ]
initial
begin
	ssd3_expected[1] = 1'bX;
end 
// expected ssd3[ 0 ]
initial
begin
	ssd3_expected[0] = 1'bX;
end 
// generate trigger
always @(led_expected or led or ssd0_expected or ssd0 or ssd1_expected or ssd1 or ssd2_expected or ssd2 or ssd3_expected or ssd3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected led = %b | expected ssd0 = %b | expected ssd1 = %b | expected ssd2 = %b | expected ssd3 = %b | ",led_expected_prev,ssd0_expected_prev,ssd1_expected_prev,ssd2_expected_prev,ssd3_expected_prev);
	$display("| real led = %b | real ssd0 = %b | real ssd1 = %b | real ssd2 = %b | real ssd3 = %b | ",led_prev,ssd0_prev,ssd1_prev,ssd2_prev,ssd3_prev);
`endif
	if (
		( led_expected_prev[0] !== 1'bx ) && ( led_prev[0] !== led_expected_prev[0] )
		&& ((led_expected_prev[0] !== last_led_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_exp[0] = led_expected_prev[0];
	end
	if (
		( led_expected_prev[1] !== 1'bx ) && ( led_prev[1] !== led_expected_prev[1] )
		&& ((led_expected_prev[1] !== last_led_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_exp[1] = led_expected_prev[1];
	end
	if (
		( led_expected_prev[2] !== 1'bx ) && ( led_prev[2] !== led_expected_prev[2] )
		&& ((led_expected_prev[2] !== last_led_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_exp[2] = led_expected_prev[2];
	end
	if (
		( led_expected_prev[3] !== 1'bx ) && ( led_prev[3] !== led_expected_prev[3] )
		&& ((led_expected_prev[3] !== last_led_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_exp[3] = led_expected_prev[3];
	end
	if (
		( led_expected_prev[4] !== 1'bx ) && ( led_prev[4] !== led_expected_prev[4] )
		&& ((led_expected_prev[4] !== last_led_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_exp[4] = led_expected_prev[4];
	end
	if (
		( led_expected_prev[5] !== 1'bx ) && ( led_prev[5] !== led_expected_prev[5] )
		&& ((led_expected_prev[5] !== last_led_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_exp[5] = led_expected_prev[5];
	end
	if (
		( led_expected_prev[6] !== 1'bx ) && ( led_prev[6] !== led_expected_prev[6] )
		&& ((led_expected_prev[6] !== last_led_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_exp[6] = led_expected_prev[6];
	end
	if (
		( led_expected_prev[7] !== 1'bx ) && ( led_prev[7] !== led_expected_prev[7] )
		&& ((led_expected_prev[7] !== last_led_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_exp[7] = led_expected_prev[7];
	end
	if (
		( ssd0_expected_prev[0] !== 1'bx ) && ( ssd0_prev[0] !== ssd0_expected_prev[0] )
		&& ((ssd0_expected_prev[0] !== last_ssd0_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd0_expected_prev);
		$display ("     Real value = %b", ssd0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ssd0_exp[0] = ssd0_expected_prev[0];
	end
	if (
		( ssd0_expected_prev[1] !== 1'bx ) && ( ssd0_prev[1] !== ssd0_expected_prev[1] )
		&& ((ssd0_expected_prev[1] !== last_ssd0_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd0_expected_prev);
		$display ("     Real value = %b", ssd0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ssd0_exp[1] = ssd0_expected_prev[1];
	end
	if (
		( ssd0_expected_prev[2] !== 1'bx ) && ( ssd0_prev[2] !== ssd0_expected_prev[2] )
		&& ((ssd0_expected_prev[2] !== last_ssd0_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd0_expected_prev);
		$display ("     Real value = %b", ssd0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ssd0_exp[2] = ssd0_expected_prev[2];
	end
	if (
		( ssd0_expected_prev[3] !== 1'bx ) && ( ssd0_prev[3] !== ssd0_expected_prev[3] )
		&& ((ssd0_expected_prev[3] !== last_ssd0_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd0_expected_prev);
		$display ("     Real value = %b", ssd0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ssd0_exp[3] = ssd0_expected_prev[3];
	end
	if (
		( ssd0_expected_prev[4] !== 1'bx ) && ( ssd0_prev[4] !== ssd0_expected_prev[4] )
		&& ((ssd0_expected_prev[4] !== last_ssd0_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd0_expected_prev);
		$display ("     Real value = %b", ssd0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ssd0_exp[4] = ssd0_expected_prev[4];
	end
	if (
		( ssd0_expected_prev[5] !== 1'bx ) && ( ssd0_prev[5] !== ssd0_expected_prev[5] )
		&& ((ssd0_expected_prev[5] !== last_ssd0_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd0_expected_prev);
		$display ("     Real value = %b", ssd0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ssd0_exp[5] = ssd0_expected_prev[5];
	end
	if (
		( ssd0_expected_prev[6] !== 1'bx ) && ( ssd0_prev[6] !== ssd0_expected_prev[6] )
		&& ((ssd0_expected_prev[6] !== last_ssd0_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd0_expected_prev);
		$display ("     Real value = %b", ssd0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ssd0_exp[6] = ssd0_expected_prev[6];
	end
	if (
		( ssd1_expected_prev[0] !== 1'bx ) && ( ssd1_prev[0] !== ssd1_expected_prev[0] )
		&& ((ssd1_expected_prev[0] !== last_ssd1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd1_expected_prev);
		$display ("     Real value = %b", ssd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ssd1_exp[0] = ssd1_expected_prev[0];
	end
	if (
		( ssd1_expected_prev[1] !== 1'bx ) && ( ssd1_prev[1] !== ssd1_expected_prev[1] )
		&& ((ssd1_expected_prev[1] !== last_ssd1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd1_expected_prev);
		$display ("     Real value = %b", ssd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ssd1_exp[1] = ssd1_expected_prev[1];
	end
	if (
		( ssd1_expected_prev[2] !== 1'bx ) && ( ssd1_prev[2] !== ssd1_expected_prev[2] )
		&& ((ssd1_expected_prev[2] !== last_ssd1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd1_expected_prev);
		$display ("     Real value = %b", ssd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ssd1_exp[2] = ssd1_expected_prev[2];
	end
	if (
		( ssd1_expected_prev[3] !== 1'bx ) && ( ssd1_prev[3] !== ssd1_expected_prev[3] )
		&& ((ssd1_expected_prev[3] !== last_ssd1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd1_expected_prev);
		$display ("     Real value = %b", ssd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ssd1_exp[3] = ssd1_expected_prev[3];
	end
	if (
		( ssd1_expected_prev[4] !== 1'bx ) && ( ssd1_prev[4] !== ssd1_expected_prev[4] )
		&& ((ssd1_expected_prev[4] !== last_ssd1_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd1_expected_prev);
		$display ("     Real value = %b", ssd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ssd1_exp[4] = ssd1_expected_prev[4];
	end
	if (
		( ssd1_expected_prev[5] !== 1'bx ) && ( ssd1_prev[5] !== ssd1_expected_prev[5] )
		&& ((ssd1_expected_prev[5] !== last_ssd1_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd1_expected_prev);
		$display ("     Real value = %b", ssd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ssd1_exp[5] = ssd1_expected_prev[5];
	end
	if (
		( ssd1_expected_prev[6] !== 1'bx ) && ( ssd1_prev[6] !== ssd1_expected_prev[6] )
		&& ((ssd1_expected_prev[6] !== last_ssd1_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd1_expected_prev);
		$display ("     Real value = %b", ssd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ssd1_exp[6] = ssd1_expected_prev[6];
	end
	if (
		( ssd2_expected_prev[0] !== 1'bx ) && ( ssd2_prev[0] !== ssd2_expected_prev[0] )
		&& ((ssd2_expected_prev[0] !== last_ssd2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd2_expected_prev);
		$display ("     Real value = %b", ssd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ssd2_exp[0] = ssd2_expected_prev[0];
	end
	if (
		( ssd2_expected_prev[1] !== 1'bx ) && ( ssd2_prev[1] !== ssd2_expected_prev[1] )
		&& ((ssd2_expected_prev[1] !== last_ssd2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd2_expected_prev);
		$display ("     Real value = %b", ssd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ssd2_exp[1] = ssd2_expected_prev[1];
	end
	if (
		( ssd2_expected_prev[2] !== 1'bx ) && ( ssd2_prev[2] !== ssd2_expected_prev[2] )
		&& ((ssd2_expected_prev[2] !== last_ssd2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd2_expected_prev);
		$display ("     Real value = %b", ssd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ssd2_exp[2] = ssd2_expected_prev[2];
	end
	if (
		( ssd2_expected_prev[3] !== 1'bx ) && ( ssd2_prev[3] !== ssd2_expected_prev[3] )
		&& ((ssd2_expected_prev[3] !== last_ssd2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd2_expected_prev);
		$display ("     Real value = %b", ssd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ssd2_exp[3] = ssd2_expected_prev[3];
	end
	if (
		( ssd2_expected_prev[4] !== 1'bx ) && ( ssd2_prev[4] !== ssd2_expected_prev[4] )
		&& ((ssd2_expected_prev[4] !== last_ssd2_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd2_expected_prev);
		$display ("     Real value = %b", ssd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ssd2_exp[4] = ssd2_expected_prev[4];
	end
	if (
		( ssd2_expected_prev[5] !== 1'bx ) && ( ssd2_prev[5] !== ssd2_expected_prev[5] )
		&& ((ssd2_expected_prev[5] !== last_ssd2_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd2_expected_prev);
		$display ("     Real value = %b", ssd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ssd2_exp[5] = ssd2_expected_prev[5];
	end
	if (
		( ssd2_expected_prev[6] !== 1'bx ) && ( ssd2_prev[6] !== ssd2_expected_prev[6] )
		&& ((ssd2_expected_prev[6] !== last_ssd2_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd2_expected_prev);
		$display ("     Real value = %b", ssd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ssd2_exp[6] = ssd2_expected_prev[6];
	end
	if (
		( ssd3_expected_prev[0] !== 1'bx ) && ( ssd3_prev[0] !== ssd3_expected_prev[0] )
		&& ((ssd3_expected_prev[0] !== last_ssd3_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd3_expected_prev);
		$display ("     Real value = %b", ssd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ssd3_exp[0] = ssd3_expected_prev[0];
	end
	if (
		( ssd3_expected_prev[1] !== 1'bx ) && ( ssd3_prev[1] !== ssd3_expected_prev[1] )
		&& ((ssd3_expected_prev[1] !== last_ssd3_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd3_expected_prev);
		$display ("     Real value = %b", ssd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ssd3_exp[1] = ssd3_expected_prev[1];
	end
	if (
		( ssd3_expected_prev[2] !== 1'bx ) && ( ssd3_prev[2] !== ssd3_expected_prev[2] )
		&& ((ssd3_expected_prev[2] !== last_ssd3_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd3_expected_prev);
		$display ("     Real value = %b", ssd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ssd3_exp[2] = ssd3_expected_prev[2];
	end
	if (
		( ssd3_expected_prev[3] !== 1'bx ) && ( ssd3_prev[3] !== ssd3_expected_prev[3] )
		&& ((ssd3_expected_prev[3] !== last_ssd3_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd3_expected_prev);
		$display ("     Real value = %b", ssd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ssd3_exp[3] = ssd3_expected_prev[3];
	end
	if (
		( ssd3_expected_prev[4] !== 1'bx ) && ( ssd3_prev[4] !== ssd3_expected_prev[4] )
		&& ((ssd3_expected_prev[4] !== last_ssd3_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd3_expected_prev);
		$display ("     Real value = %b", ssd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ssd3_exp[4] = ssd3_expected_prev[4];
	end
	if (
		( ssd3_expected_prev[5] !== 1'bx ) && ( ssd3_prev[5] !== ssd3_expected_prev[5] )
		&& ((ssd3_expected_prev[5] !== last_ssd3_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd3_expected_prev);
		$display ("     Real value = %b", ssd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ssd3_exp[5] = ssd3_expected_prev[5];
	end
	if (
		( ssd3_expected_prev[6] !== 1'bx ) && ( ssd3_prev[6] !== ssd3_expected_prev[6] )
		&& ((ssd3_expected_prev[6] !== last_ssd3_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd3_expected_prev);
		$display ("     Real value = %b", ssd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ssd3_exp[6] = ssd3_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module wof_vlg_vec_tst();
// constants                                           
// general purpose registers
reg btn;
reg clk;
// wires                                               
wire [7:0] led;
wire [6:0] ssd0;
wire [6:0] ssd1;
wire [6:0] ssd2;
wire [6:0] ssd3;

wire sampler;                             

// assign statements (if any)                          
wof i1 (
// port map - connection between master ports and signals/registers   
	.btn(btn),
	.clk(clk),
	.led(led),
	.ssd0(ssd0),
	.ssd1(ssd1),
	.ssd2(ssd2),
	.ssd3(ssd3)
);

// btn
initial
begin
	btn = 1'b0;
	btn = #160000 1'b1;
	btn = #10000 1'b0;
	btn = #180000 1'b1;
	btn = #10000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #4000 1'b1;
	#4000;
end 

wof_vlg_sample_tst tb_sample (
	.btn(btn),
	.clk(clk),
	.sampler_tx(sampler)
);

wof_vlg_check_tst tb_out(
	.led(led),
	.ssd0(ssd0),
	.ssd1(ssd1),
	.ssd2(ssd2),
	.ssd3(ssd3),
	.sampler_rx(sampler)
);
endmodule

